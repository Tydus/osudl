#!/usr/bin/python

from time import time
from mongoengine import *
from os.path import isfile
from urllib import quote

from tornado.web import Application,RequestHandler,asynchronous,HTTPError
from tornado.httpclient import AsyncHTTPClient
from tornado.ioloop import IOLoop

class Visit(EmbeddedDocument):
    time=IntField(required=True)
    ip=StringField(required=True)

class Osz(Document):
    name=StringField(required=True,primary_key=True)
    long_name=StringField()
    size=IntField()
    file_path=StringField()
    last_visit=IntField()
    l_visit=ListField(EmbeddedDocumentField(Visit))
    meta={'indexes':['-last_visit']}

# FIXME Not Implemented yet
class DownQuotaExceededException(Exception):
    def __init__(self,content):
        Exception.__init__(self)
        self.content=content

fetching={}

class OsuDl(RequestHandler):

    def fetch(self,n):
        global fetching
        if not fetching.get(n):
            import pdb
            pdb.set_trace()

            fetching[n]=[]
            def func(response):
                import pdb
                pdb.set_trace()

                global fetching
                # Insert DB
                d=Osz.objects(name=n)
                if d.count():
                    d=d[0]
                else:
                    d=Osz(name=n)
                d.long_name=response.headers['Content-Disposition'].split('"')[1]
                d.size=len(response.body)
                d.file_path=d.long_name
                d.save()

                # Write File
                f=file(data_dir+'/'+d.file_path,'w')
                f.write(response.body)
                f.close()

                # Fire subscripters, get again
                for get in fetching[n]:
                    get(n)
                del fetching[n]

            cookie=self.request.headers['Cookie']
            AsyncHTTPClient().fetch(
                        'http://osu.ppy.sh/d/'+n,
                        headers=self.request.headers,
                        #headers={
                        #    'Cookie':self.request.headers['Cookie'],
                        #    'X-Real-IP':self.request.remote_ip,
                        #    },
                        # Set request timeout to 5min
                        request_timeout=300,
                        callback=func,
                    )

        fetching[n].append(self.get)
    
    @asynchronous
    def get(self,n):
        # Check if request has cookie
        if not self.request.headers.get('Cookie'):
            raise HTTPError(401)

        # Check if we has one in db
        d=Osz.objects(name=n)
        if d.count()==0:
            self.fetch(n)
            return

        d=d[0]
        if not isfile(data_dir+'/'+d.file_path):
            # It's removed by someone else
            # Fetch it again
            self.fetch(n)
            return

        # Log visit
        d.last_visit=time()
        d.l_visit.append(Visit(ip=self.request.remote_ip,time=d.last_visit))
        d.save()

        # Response to client
        self.redirect('http://osz-test.tyimg.info/'+quote(d.file_path),permanent=True)
        #self.finish()
        
data_dir="osz"
# Connect to DB
connect('osudl')

# Run Server
application=Application([(r'/d/([0-9]+n?)',OsuDl)])
application.listen(8888)
IOLoop.instance().start()
