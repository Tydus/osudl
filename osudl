#!/usr/bin/python

from time import time,ctime,gmtime
from mongoengine import *
from sys import stderr
from os import makedirs
from os.path import isfile, isdir
from urllib import quote
from argparse import ArgumentParser

from tornado.web import Application,RequestHandler,asynchronous,HTTPError
from tornado.httpclient import AsyncHTTPClient
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop

# DB Schema
class Visit(EmbeddedDocument):
    time=IntField(required=True)
    ip=StringField(required=True)

class Osz(Document):
    name=StringField(required=True,primary_key=True)
    long_name=StringField()
    size=IntField()
    file_path=StringField()
    last_visit=IntField()
    l_visit=ListField(EmbeddedDocumentField(Visit))
    meta={'indexes':['-last_visit']}

def strtime(tm=time()):
    return "%04d-%02d-%02d %02d:%02d:%02d",gmtime(tm)[:6]

# Log
LOG_FATAL=-1
LOG_ERROR=0
LOG_WARNING=1
LOG_INFO=2
LOG_VERBOSE=3
def log(level,s,*args):
    if level<=verbosity:
        print >>logfd,"[%19s][%d]"%(strtime,level)+s%tuple(args)

# Indicates which ones are Fetching
fetching={}

def fireAllandRemove(n,*args,**kwargs):
    global fetching
    for cb in fetching[n]:
        cb(n,*args,**kwargs)
    del fetching[n]

class OsuDl(RequestHandler):

    def fetch(self,n):
        global fetching
        if not fetching.get(n):
            log(LOG_VERBOSE, "start fetching %s",n)
            fetching[n]=[]
            def func(response):
                global fetching

                log(LOG_VERBOSE, "finish fetching %s",n)
                if response.error:
                    log(LOG_WARNING, "fetch %s failed: ",n,response.error)
                    return fireAllandRemove(n,error=response.error)

                if not response.headers.get('Content-Disposition'):
                    # Failed (Down Quota Exceeded?)
                    # Fire subscripters for failure
                    log(LOG_VERBOSE, "fetch %s failed: no Content-Disposition",n)
                    return fireAllandRemove(n,failed=True,body=response.body)

                # Write DB
                d=Osz.objects(name=n)
                if d.count():
                    # We already has one
                    d=d[0]
                else:
                    # Create a new one
                    d=Osz(name=n)
                d.long_name=response.headers['Content-Disposition'].split('"')[1]
                d.size=len(response.body)
                d.file_path=d.long_name
                d.save()

                # Write File
                f=file(osz_dir+'/'+d.file_path,'w')
                f.write(response.body)
                f.close()

                # Fire subscripters, get again
                fireAllandRemove(n)

            cookie=self.request.headers['Cookie']
            AsyncHTTPClient().fetch(
                        'http://osu.ppy.sh/d/'+n,
                        headers=self.request.headers,
                        #headers={
                        #    'Cookie':self.request.headers['Cookie'],
                        #    'X-Real-IP':self.request.remote_ip,
                        #    },
                        # Set request timeout to 5min
                        request_timeout=300,
                        callback=func,
                    )

        fetching[n].append(self.callback)

    def callback(self,n,failed=False,body=None,error=None):
        if error:
            raise error
        if not failed:
            return self.get(n)
        
        # Failed
        self.write(body)
        self.finish()
    
    @asynchronous
    def get(self,n):
        # Check if request has cookie
        if not self.request.headers.get('Cookie'):
            log(LOG_WARNING, "No Cookie in request from %s", request.remote_ip)
            raise HTTPError(401)

        # Check if we has one in db
        d=Osz.objects(name=n)
        if d.count()==0:
            log(LOG_INFO, "No record in db for %s",n)
            self.fetch(n)
            return

        d=d[0]
        if not isfile(osz_dir+'/'+d.file_path):
            # It's removed by someone else
            log(LOG_INFO, "File of %s doesn't exists",n)
            # Fetch it again
            self.fetch(n)
            return

        # Log visit
        d.last_visit=time()
        d.l_visit.append(Visit(ip=self.request.remote_ip,time=d.last_visit))
        d.save()
        log(LOG_VERBOSE, "%s visited %s at %s",self.request.remote_ip,n,strtime(d.last_visit))

        # Response to client
        self.redirect(url_prefix+quote(d.file_path),permanent=True)

def parse_args():
    ap=ArgumentParser(description='OsuDl Server')

    ap.add_argument('-l','--listen', help='Listen port',default=8888,type=int)

    ap.add_argument('--no-fork', help='Run in forground, for debug use',action='store_true')
    ap.add_argument('-v','--verbose', help='Run in verbose mode, use more to be more verbosity',action='count',default=LOG_INFO)
    ap.add_argument('-q','--quiet', help='Run in quiet mode',action='count',default=0)
    #ap.add_argument('-p','--pid-file', help='PID file',default='/var/run/osudl.pid')
    ap.add_argument('--log-file', help='Log file, use - for stderr',default='/var/log/osudl.log')

    ap.add_argument('-d','--osz-dir', help='Osz file dir',default='/data/osudl')
    ap.add_argument('-u','--osz-url-prefix', help='Osz url prefix, must be ended with /',default='http://osz.tyimg.info/')

    ap.add_argument('--db-host', help='Database host name', default='127.0.0.1')
    ap.add_argument('--db-port', help='Database port', default=27017,type=int)
    ap.add_argument('--db-name', help='Database name', default='osudl')
    ap.add_argument('--db-user', help='Database user name')
    ap.add_argument('--db-pass', help='Database password')

    return ap.parse_args()

def main():
    args=parse_args()

    # Fork
    if not args.no_fork and fork():
        return

    global logfd, verbosity, osz_dir, url_prefix
    # Assign Log File Descriptor
    logfd=open(args.log_file,'a') if args.log_file != '-' else stderr

    # Calc verbosity
    verbosity=args.verbose-args.quiet

    # Osz Directory and url prefix
    osz_dir=args.osz_dir
    url_prefix=args.osz_url_prefix

    # Ensure osz_dir is usable
    if not path.isdir(osz_dir):
        makedirs(osz_dir)

    # Connect to DB
    connect(         args.db_name,
            host    =args.db_host,
            port    =args.db_port,
            username=args.db_user,
            password=args.db_pass,
           )

    # Run Server
    HTTPServer(Application([(r'/d/([0-9]+n?)',OsuDl)]),xheaders=True).listen(args.listen)
    IOLoop.instance().start()

if __name__=='__main__':
    main()

